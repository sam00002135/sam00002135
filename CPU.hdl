// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in = instruction[15],out = iout);
    Mux16(a = ALUout,b = instruction,sel = iout,out = n);
    Or(a = instruction[5],b = iout,out = toA);
    ARegister(in = n,load = toA,out = An,out[0..14] = addressM);
    And(a = instruction[15],b = instruction[12],out = AnB);
    Mux16(a = An,b = inM,sel = AnB,out = AM);
    ALU(x = D,y = AM,zx = instruction[11],nx = instruction[10],zy = instruction[9],ny = instruction[8],f = instruction[7],no = instruction[6],out = ALUout,out = outM,zr = zr,ng = ng);
    And(a = instruction[15],b = instruction[4],out = outD);
    DRegister(in =ALUout,load = outD,out = D);
    And(a = instruction[15],b = instruction[3],out = writeM);
    Not(in = ng,out = pos);
	Not(in = zr,out = nzr);
    And(a = instruction[15],b = instruction[0],out = jgt);
    And(a = pos,b = nzr,out = posnzr);
    And(a = posnzr,b = jgt,out = pj);
    And(a = instruction[15],b = instruction[1],out = jeq);
    And(a = jeq,b = zr,out = jz);
    And(a = instruction[15],b = instruction[2],out = jlt);
    And(a = jlt,b = ng,out = jn);
    Or(a = pj,b = jz,out = pz);
    Or(a = jn,b = pz,out = jp);
    PC(in = An,load = jp,inc = true,reset = reset,out[0..14] = pc);
}